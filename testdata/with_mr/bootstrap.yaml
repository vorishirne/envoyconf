admin:
  access_log_path: /dev/null
  address:
    socket_address:
      address: 127.0.0.1
      port_value: 15000
  profile_path: /var/lib/istio/data/envoy.prof
dynamic_resources:
  cds_config:
    path: ./clusters.yaml
  lds_config:
    path: ./listeners.yaml
layered_runtime:
  layers:
  - name: deprecation
    static_layer:
      envoy.deprecated_features:envoy.config.listener.v3.Listener.hidden_envoy_deprecated_use_original_dst: true
      envoy.reloadable_features.strict_1xx_and_204_response_headers: false
      re2.max_program_size.error_level: 1024
  - name: global config
    static_layer:
      overload.global_downstream_max_connections: 2147483647
  - admin_layer: {}
    name: admin
node:
  cluster: istio-proxy
  id: router~10.198.0.166~ncx-istio-agent.ncx-01fte0nt2930g669x69n87n6da~ncx-01fte0nt2930g669x69n87n6da.svc.cluster.local
  locality: {}
  metadata:
    AUTO_REGISTER_GROUP: wg-ncx-01fte0nt2930g669x69n87n6da
    CLUSTER_ID: Kubernetes
    DNS_CAPTURE: "true"
    INSTANCE_IPS: 10.198.0.166,fe80::5054:ff:fe87:e24a,172.18.0.1,fe80::42:f3ff:fe2e:a8fe,fe80::c40e:36ff:fee9:4042
    ISTIO_VERSION: 1.9.0
    LABELS:
      app: ncx
      service.istio.io/canonical-name: ncx
      service.istio.io/canonical-revision: latest
      test_label: ncx_test
    MESH_ID: mesh1
    NAME: ncx-istio-agent
    NAMESPACE: ncx-01fte0nt2930g669x69n87n6da
    NETWORK: ""
    PROXY_CONFIG:
      binaryPath: /usr/local/bin/envoy
      concurrency: 0
      configPath: ./etc/istio/proxy
      controlPlaneAuthPolicy: MUTUAL_TLS
      discoveryAddress: a2e140c16169e4ddd8b841076bb13f64-1199659357.us-west-2.elb.amazonaws.com:15012
      drainDuration: 45s
      meshId: mesh1
      parentShutdownDuration: 60s
      proxyAdminPort: 15000
      proxyMetadata:
        CANONICAL_REVISION: latest
        CANONICAL_SERVICE: ncx
        ISTIO_INBOUND_PORTS: '*'
        ISTIO_LOCAL_EXCLUDE_PORTS: 15090,15021,24224
        ISTIO_META_AUTO_REGISTER_GROUP: wg-ncx-01fte0nt2930g669x69n87n6da
        ISTIO_META_CLUSTER_ID: Kubernetes
        ISTIO_META_DNS_CAPTURE: "true"
        ISTIO_META_MESH_ID: mesh1
        ISTIO_META_NETWORK: ""
        ISTIO_META_WORKLOAD_NAME: wg-ncx-01fte0nt2930g669x69n87n6da
        ISTIO_METAJSON_LABELS: '{"app": "ncx", "test_label": "ncx_test", "service.istio.io/canonical-name":
          "ncx", "service.istio.io/canonical-revision": "latest"}'
        ISTIO_NAMESPACE: ncx-01fte0nt2930g669x69n87n6da
        ISTIO_SERVICE: wg-ncx-01fte0nt2930g669x69n87n6da.ncx-01fte0nt2930g669x69n87n6da
        ISTIO_SERVICE_CIDR: '*'
        PILOT_ADDRESS: a2e140c16169e4ddd8b841076bb13f64-1199659357.us-west-2.elb.amazonaws.com:15012
        POD_NAMESPACE: ncx-01fte0nt2930g669x69n87n6da
        SERVICE_ACCOUNT: ncx-01fte0nt2930g669x69n87n6da-sa
        TRUST_DOMAIN: cluster.local
        test_ncx_proxy: ncx_test_value
      serviceCluster: istio-proxy
      statNameLength: 189
      statusPort: 15020
      terminationDrainDuration: 5s
      tracing:
        zipkin:
          address: zipkin.istio-system:9411
    SERVICE_ACCOUNT: ncx-01fte0nt2930g669x69n87n6da-sa
    WORKLOAD_NAME: wg-ncx-01fte0nt2930g669x69n87n6da
    app: ncx
    service.istio.io/canonical-name: ncx
    service.istio.io/canonical-revision: latest
    test_label: ncx_test
  user_agent_name: envoy
static_resources:
  clusters:
  - connect_timeout: 0.250s
    load_assignment:
      cluster_name: prometheus_stats
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: 127.0.0.1
                port_value: 15000
    name: prometheus_stats
    type: STATIC
  - connect_timeout: 0.250s
    load_assignment:
      cluster_name: prometheus_stats
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: 127.0.0.1
                port_value: 15020
    name: agent
    type: STATIC
  - connect_timeout: 1s
    http2_protocol_options: {}
    load_assignment:
      cluster_name: sds-grpc
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              pipe:
                path: ./etc/istio/proxy/SDS
    name: sds-grpc
    type: STATIC
  - connect_timeout: 0.250s
    dns_lookup_family: V4_ONLY
    lb_policy: CLUSTER_PROVIDED
    name: original-destination-cluster
    type: ORIGINAL_DST
  - circuit_breakers:
      thresholds:
      - max_connections: 100000
        max_pending_requests: 100000
        max_requests: 100000
      - max_connections: 100000
        max_pending_requests: 100000
        max_requests: 100000
        priority: HIGH
    connect_timeout: 1s
    http2_protocol_options: {}
    load_assignment:
      cluster_name: xds-grpc
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              pipe:
                path: ./etc/istio/proxy/XDS
    max_requests_per_connection: 1
    name: xds-grpc
    type: STATIC
    upstream_connection_options:
      tcp_keepalive:
        keepalive_time: 300
  - connect_timeout: 1s
    dns_lookup_family: V4_ONLY
    dns_refresh_rate: 30s
    load_assignment:
      cluster_name: zipkin
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: zipkin.istio-system
                port_value: 9411
    name: zipkin
    respect_dns_ttl: true
    type: STRICT_DNS
  listeners:
  - address:
      socket_address:
        address: 0.0.0.0
        port_value: 15090
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          '@type': type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          http_filters:
          - name: envoy.filters.http.router
            typed_config:
              '@type': type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
          route_config:
            virtual_hosts:
            - domains:
              - '*'
              name: backend
              routes:
              - match:
                  prefix: /stats/prometheus
                route:
                  cluster: prometheus_stats
          stat_prefix: stats
  - address:
      socket_address:
        address: 0.0.0.0
        port_value: 15021
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          '@type': type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          http_filters:
          - name: envoy.filters.http.router
            typed_config:
              '@type': type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
          route_config:
            virtual_hosts:
            - domains:
              - '*'
              name: backend
              routes:
              - match:
                  prefix: /healthz/ready
                route:
                  cluster: agent
          stat_prefix: agent
  - address:
      socket_address:
        address: 0.0.0.0
        port_value: 15006
    continue_on_listener_filters_timeout: true
    filter_chains:
    - filters:
      - name: envoy.filters.network.tcp_proxy
        typed_config:
          '@type': type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy
          access_log:
          - name: envoy.access_loggers.file
            typed_config:
              '@type': type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
              log_format:
                json_format:
                  authority: '%REQ(:AUTHORITY)%'
                  bytes_received: '%BYTES_RECEIVED%'
                  bytes_sent: '%BYTES_SENT%'
                  connection_termination_details: '%CONNECTION_TERMINATION_DETAILS%'
                  downstream_local_address: '%DOWNSTREAM_LOCAL_ADDRESS%'
                  downstream_remote_address: '%DOWNSTREAM_REMOTE_ADDRESS%'
                  duration: '%DURATION%'
                  method: '%REQ(:METHOD)%'
                  path: '%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%'
                  protocol: '%PROTOCOL%'
                  request_id: '%REQ(X-REQUEST-ID)%'
                  requested_server_name: '%REQUESTED_SERVER_NAME%'
                  response_code: '%RESPONSE_CODE%'
                  response_code_details: '%RESPONSE_CODE_DETAILS%'
                  response_flags: '%RESPONSE_FLAGS%'
                  route_name: '%ROUTE_NAME%'
                  start_time: '%START_TIME%'
                  upstream_cluster: '%UPSTREAM_CLUSTER%'
                  upstream_host: '%UPSTREAM_HOST%'
                  upstream_local_address: '%UPSTREAM_LOCAL_ADDRESS%'
                  upstream_service_time: '%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%'
                  upstream_transport_failure_reason: '%UPSTREAM_TRANSPORT_FAILURE_REASON%'
                  user_agent: '%REQ(USER-AGENT)%'
                  x_forwarded_for: '%REQ(X-FORWARDED-FOR)%'
              path: /dev/stdout
          cluster: original-destination-cluster
          stat_prefix: PassthroughCluster
      name: virtualInbound-passthrough
    listener_filters:
    - name: envoy.filters.listener.original_dst
      typed_config:
        '@type': type.googleapis.com/envoy.extensions.filters.listener.original_dst.v3.OriginalDst
    listener_filters_timeout: 0s
    name: virtualInbound
    traffic_direction: INBOUND
    transparent: true
    use_original_dst: true
stats_config:
  stats_matcher:
    inclusion_list:
      patterns:
      - prefix: reporter=
      - prefix: cluster_manager
      - prefix: listener_manager
      - prefix: server
      - prefix: cluster.xds-grpc
      - prefix: wasm
      - prefix: component
  stats_tags:
  - regex: ^cluster\.((.+?(\..+?\.svc\.cluster\.local)?)\.)
    tag_name: cluster_name
  - regex: ^tcp\.((.*?)\.)\w+?$
    tag_name: tcp_prefix
  - regex: (response_code=\.=(.+?);\.;)|_rq(_(\.d{3}))$
    tag_name: response_code
  - regex: _rq(_(\dxx))$
    tag_name: response_code_class
  - regex: ^listener(?=\.).*?\.http\.(((?:[_.[:digit:]]*|[_\[\]aAbBcCdDeEfF[:digit:]]*))\.)
    tag_name: http_conn_manager_listener_prefix
  - regex: ^http\.(((?:[_.[:digit:]]*|[_\[\]aAbBcCdDeEfF[:digit:]]*))\.)
    tag_name: http_conn_manager_prefix
  - regex: ^listener\.(((?:[_.[:digit:]]*|[_\[\]aAbBcCdDeEfF[:digit:]]*))\.)
    tag_name: listener_address
  - regex: ^mongo\.(.+?)\.(collection|cmd|cx_|op_|delays_|decoding_)(.*?)$
    tag_name: mongo_prefix
  - regex: (reporter=\.=(.*?);\.;)
    tag_name: reporter
  - regex: (source_namespace=\.=(.*?);\.;)
    tag_name: source_namespace
  - regex: (source_workload=\.=(.*?);\.;)
    tag_name: source_workload
  - regex: (source_workload_namespace=\.=(.*?);\.;)
    tag_name: source_workload_namespace
  - regex: (source_principal=\.=(.*?);\.;)
    tag_name: source_principal
  - regex: (source_app=\.=(.*?);\.;)
    tag_name: source_app
  - regex: (source_version=\.=(.*?);\.;)
    tag_name: source_version
  - regex: (source_cluster=\.=(.*?);\.;)
    tag_name: source_cluster
  - regex: (destination_namespace=\.=(.*?);\.;)
    tag_name: destination_namespace
  - regex: (destination_workload=\.=(.*?);\.;)
    tag_name: destination_workload
  - regex: (destination_workload_namespace=\.=(.*?);\.;)
    tag_name: destination_workload_namespace
  - regex: (destination_principal=\.=(.*?);\.;)
    tag_name: destination_principal
  - regex: (destination_app=\.=(.*?);\.;)
    tag_name: destination_app
  - regex: (destination_version=\.=(.*?);\.;)
    tag_name: destination_version
  - regex: (destination_service=\.=(.*?);\.;)
    tag_name: destination_service
  - regex: (destination_service_name=\.=(.*?);\.;)
    tag_name: destination_service_name
  - regex: (destination_service_namespace=\.=(.*?);\.;)
    tag_name: destination_service_namespace
  - regex: (destination_port=\.=(.*?);\.;)
    tag_name: destination_port
  - regex: (destination_cluster=\.=(.*?);\.;)
    tag_name: destination_cluster
  - regex: (request_protocol=\.=(.*?);\.;)
    tag_name: request_protocol
  - regex: (request_operation=\.=(.*?);\.;)
    tag_name: request_operation
  - regex: (request_host=\.=(.*?);\.;)
    tag_name: request_host
  - regex: (response_flags=\.=(.*?);\.;)
    tag_name: response_flags
  - regex: (grpc_response_status=\.=(.*?);\.;)
    tag_name: grpc_response_status
  - regex: (connection_security_policy=\.=(.*?);\.;)
    tag_name: connection_security_policy
  - regex: (permissive_response_code=\.=(.*?);\.;)
    tag_name: permissive_response_code
  - regex: (permissive_response_policyid=\.=(.*?);\.;)
    tag_name: permissive_response_policyid
  - regex: (source_canonical_service=\.=(.*?);\.;)
    tag_name: source_canonical_service
  - regex: (destination_canonical_service=\.=(.*?);\.;)
    tag_name: destination_canonical_service
  - regex: (source_canonical_revision=\.=(.*?);\.;)
    tag_name: source_canonical_revision
  - regex: (destination_canonical_revision=\.=(.*?);\.;)
    tag_name: destination_canonical_revision
  - regex: (cache\.(.+?)\.)
    tag_name: cache
  - regex: (component\.(.+?)\.)
    tag_name: component
  - regex: (tag\.(.+?);\.)
    tag_name: tag
  - regex: (wasm_filter\.(.+?)\.)
    tag_name: wasm_filter
  use_all_default_tags: false
tracing:
  http:
    name: envoy.tracers.zipkin
    typed_config:
      '@type': type.googleapis.com/envoy.config.trace.v3.ZipkinConfig
      collector_cluster: zipkin
      collector_endpoint: /api/v2/spans
      collector_endpoint_version: HTTP_JSON
      shared_span_context: false
      trace_id_128bit: true
